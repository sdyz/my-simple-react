/**
 * demo2
 * Fiber ÂÆûÁé∞
 */
function createElement(type, props, ...children) {
  return {
    type,
    props: {
      ...props,
      children: children.map((child) =>
        typeof child === "object" ? child : createTextElement(child)
      ),
    },
  };
}

function createTextElement(text) {
  return {
    type: "TEXT_ELEMENT",
    props: {
      nodeValue: text,
      children: [],
    },
  };
}

const MyReact = {
  createElement,
  render,
};

/** @jsx MyReact.createElement */
const element = (
  <div id="foo">
    <a>bar</a>
    <b />
  </div>
);

console.log("element", element); // vDom

// ÈáçÂÜôrender
function createDom(fiber) {
  // 1. ÂàõÂª∫‰∏çÂêåÁ±ªÂûãÁöÑDOMËäÇÁÇπ
  const dom =
    fiber.type == "TEXT_ELEMENT"
      ? document.createTextNode("")
      : document.createElement(fiber.type);

  // 2.‰∏∫ DOM ËäÇÁÇπÊ∑ªÂä†Â±ûÊÄßprops (Ê≤°ÊúâchildrenÂ±ûÊÄß)
  const isProperty = (key) => key !== "children";
  Object.keys(fiber.props)
    .filter(isProperty)
    .forEach((name) => {
      dom[name] = fiber.props[name];
    });

  return dom;
}

let nextUnitOfWork = null;

function render(element, container) {
  // ÂÆö‰πâÂàùÂßãÂ∑•‰ΩúÂçïÂÖÉÔºàÂÆö‰πâÂàùÂßãFiberÊ†πËäÇÁÇπÔºâ
  nextUnitOfWork = {
    dom: container, // root
    props: {
      children: [element], // DOM
    },
  };
  console.log("1. ÂàùÂßã Fiber-->", nextUnitOfWork);
}

function workLoop(deadline) {
  let shouldYield = false;
  while (nextUnitOfWork && !shouldYield) {
    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
    shouldYield = deadline.timeRemaining() < 1;
  }
  if (nextUnitOfWork) {
    requestIdleCallback(workLoop);
  }
}

requestIdleCallback(workLoop);

/**
 * ÊâßË°åÂ∑•‰ΩúÂçïÂÖÉÈÉΩÂÅö‰∫Ü‰ªÄ‰πà‚ùì
 */
function performUnitOfWork(fiber) {
  // type:div
  //  1. ÊääÂÖÉÁ¥†Ê∑ªÂä†Âà∞ dom ‰∏≠
  if (!fiber.dom) {
    fiber.dom = createDom(fiber);
  }
  if (fiber.parent) {
    fiber.parent.dom.appendChild(fiber.dom);
  }

  // 2. ÂΩì‰ªéÊ†π Fiber Âêë‰∏ãÂàõÂª∫ Fiber Êó∂ÔºåÊàë‰ª¨ÂßãÁªàÊòØ‰∏∫Â≠êËäÇÁÇπÂàõÂª∫Fiber
  const elements = fiber.props.children; // ‰πãÂâçÁöÑvDOMÁªìÊûÑ
  let index = 0;
  let prevSibling = null;
  while (index < elements.length) {
    const element = elements[index];
    const newFiber = {
      type: element.type, // div
      props: element.props, //
      dom: null,
      parent: fiber,
    };
    // Á¨¨‰∏Ä‰∏™Â≠êÂÖÉÁ¥† ‰Ωú‰∏∫ childÔºåÂÖ∂‰ΩôÁöÑ Â≠êÂÖÉÁ¥† ‰Ωú‰∏∫ sibling
    if (index === 0) {
      fiber.child = newFiber;
    } else {
      prevSibling.sibling = newFiber;
    }
    prevSibling = newFiber;
    index++;
  }
  console.log("2. ÊØèÊ¨°ÊâßË°åÂ∑•‰ΩúÂçïÂÖÉÂêéÁöÑFiberÊ†ë", fiber);

  // Ê≠•È™§2ÂÆûÁé∞‰∫ÜÂàõÂª∫ fiberÊ†ëÁöÑËøáÁ®ã üëÜüëÜüëÜ
  // ‰∏ãÈù¢ÁöÑÊ≠•È™§3ÂÆûÁé∞ÈÅçÂéÜ fiberÁöÑËøáÁ®ã üëáüëáüëá

  // 3. ÈÅçÂéÜfiberÊ†ëÔºåÊâæÂà∞‰∏ã‰∏Ä‰∏™Â∑•‰ΩúÂçïÂÖÉ
  if (fiber.child) {
    return fiber.child;
  }
  while (fiber) {
    if (fiber.sibling) {
      return fiber.sibling;
    }
    fiber = fiber.parent;
  }
}

// console.log("3. ÂÆåÊï¥ÁöÑfiberÊ†ë -> ÂàùÂßã");

const container = document.getElementById("root");
MyReact.render(element, container);
